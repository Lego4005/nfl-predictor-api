[tool:pytest]
# pytest configuration for E2E tests

# Test discovery
testpaths = tests/e2e
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers
markers =
    smoke: Smoke tests - critical functionality that must work
    integration: Integration tests - cross-component functionality
    performance: Performance tests - load, response times, resource usage
    slow: Slow running tests (>30 seconds)
    flaky: Tests that may fail intermittently
    regression: Regression tests for specific bug fixes
    user_journey: Complete user workflow tests
    real_time: WebSocket and live data tests
    betting_flow: Betting and financial calculations
    api: API endpoint tests
    ui: User interface tests
    database: Database interaction tests
    external: Tests requiring external services

# Minimum version
minversion = 7.4

# Pytest options
addopts =
    --strict-markers
    --strict-config
    --tb=short
    --disable-warnings
    --color=yes
    --durations=10
    --maxfail=5
    -ra

# Asyncio configuration
asyncio_mode = auto

# Timeout configuration
timeout = 300
timeout_method = thread

# Test collection
collect_ignore = [
    "config/test_environment.py",
    "scripts/",
    "fixtures/",
    "utils/",
    "mocks/"
]

# Console output
console_output_style = progress

# Filtering
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    ignore:.*unclosed.*:ResourceWarning

# Log configuration
log_cli = false
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = test-results/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)d)
log_file_date_format = %Y-%m-%d %H:%M:%S

# Coverage (if using pytest-cov)
[tool:coverage:run]
source = src/
omit =
    tests/*
    */migrations/*
    */venv/*
    */virtualenv/*
    */.venv/*

[tool:coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:

[tool:coverage:html]
directory = test-results/coverage_html