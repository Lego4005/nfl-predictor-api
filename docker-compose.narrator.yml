version: '3.8'

services:
  nfl-narrator-api:
    build:
      context: .
      dockerfile: Dockerfile.narrator
    container_name: nfl-narrator-api
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - ESPN_API_RATE_LIMIT=1.0
      - POLLING_INTERVAL=5.0
      - DEBUG=false
      - LOG_LEVEL=INFO
    depends_on:
      - redis
      - postgres
    networks:
      - narrator-network
    volumes:
      - ./models:/app/models
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/narrator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: nfl-narrator-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - narrator-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: nfl-narrator-db
    environment:
      - POSTGRES_DB=nfl_predictor
      - POSTGRES_USER=narrator_user
      - POSTGRES_PASSWORD=narrator_pass_2024
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - narrator-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U narrator_user -d nfl_predictor"]
      interval: 10s
      timeout: 5s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: nfl-narrator-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - nfl-narrator-api
    networks:
      - narrator-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: nfl-narrator-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - narrator-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: nfl-narrator-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=narrator_grafana_2024
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - narrator-network
    restart: unless-stopped

  model-trainer:
    build:
      context: .
      dockerfile: Dockerfile.trainer
    container_name: nfl-narrator-trainer
    environment:
      - POSTGRES_URL=postgresql://narrator_user:narrator_pass_2024@postgres:5432/nfl_predictor
      - REDIS_URL=redis://redis:6379
      - TRAINING_SCHEDULE=0 2 * * *  # Daily at 2 AM
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - narrator-network
    restart: unless-stopped
    profiles:
      - training

networks:
  narrator-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local