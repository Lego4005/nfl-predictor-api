version: '3.8'

services:
  # Enhanced NFL Prediction Dashboard
  nfl-dashboard:
    build:
      context: .
      dockerfile: Dockerfile.enhanced
      args:
        - BUILD_TIME=${BUILD_TIME:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}
        - APP_VERSION=${APP_VERSION:-latest}
    container_name: nfl-dashboard-enhanced
    ports:
      - "${DASHBOARD_PORT:-3000}:3000"
    environment:
      # React App Configuration
      - NODE_ENV=production
      - REACT_APP_ENV=${REACT_APP_ENV:-production}
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_WS_URL=${REACT_APP_WS_URL:-ws://localhost:8080}
      
      # Supabase Configuration
      - REACT_APP_SUPABASE_URL=${REACT_APP_SUPABASE_URL}
      - REACT_APP_SUPABASE_ANON_KEY=${REACT_APP_SUPABASE_ANON_KEY}
      
      # Performance Configuration
      - REACT_APP_ENABLE_ANALYTICS=${REACT_APP_ENABLE_ANALYTICS:-true}
      - REACT_APP_SENTRY_DSN=${REACT_APP_SENTRY_DSN}
      
      # Feature Flags
      - REACT_APP_ENABLE_EXPERT_BATTLES=${REACT_APP_ENABLE_EXPERT_BATTLES:-true}
      - REACT_APP_ENABLE_LIVE_UPDATES=${REACT_APP_ENABLE_LIVE_UPDATES:-true}
      - REACT_APP_ENABLE_AI_COUNCIL=${REACT_APP_ENABLE_AI_COUNCIL:-true}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - nfl-network
    depends_on:
      - api-server
      - websocket-server
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nfl-dashboard.rule=Host(`${DASHBOARD_DOMAIN:-localhost}`)"
      - "traefik.http.routers.nfl-dashboard.tls=true"
      - "traefik.http.routers.nfl-dashboard.tls.certresolver=letsencrypt"

  # Enhanced API Server
  api-server:
    build:
      context: .
      dockerfile: api.Dockerfile
    container_name: nfl-api-enhanced
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - JWT_SECRET=${JWT_SECRET}
      - API_RATE_LIMIT=${API_RATE_LIMIT:-1000}
      - ENABLE_CORS=${ENABLE_CORS:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nfl-network
    depends_on:
      - redis
      - postgres

  # Enhanced WebSocket Server
  websocket-server:
    build:
      context: .
      dockerfile: websocket.Dockerfile
    container_name: nfl-websocket-enhanced
    ports:
      - "${WS_PORT:-8080}:8080"
    environment:
      - NODE_ENV=production
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - WS_MAX_CONNECTIONS=${WS_MAX_CONNECTIONS:-1000}
      - WS_HEARTBEAT_INTERVAL=${WS_HEARTBEAT_INTERVAL:-30000}
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - nfl-network
    depends_on:
      - redis

  # Redis for caching and real-time data
  redis:
    image: redis:7-alpine
    container_name: nfl-redis-enhanced
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nfl-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: nfl-postgres-enhanced
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-nfl_predictions}
      - POSTGRES_USER=${POSTGRES_USER:-nfl_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-nfl_user} -d ${POSTGRES_DB:-nfl_predictions}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - nfl-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: nfl-nginx-enhanced
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    restart: unless-stopped
    networks:
      - nfl-network
    depends_on:
      - nfl-dashboard
      - api-server
      - websocket-server

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: nfl-prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - nfl-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: nfl-grafana
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    restart: unless-stopped
    networks:
      - nfl-network
    depends_on:
      - prometheus

  # Log aggregation with ELK Stack (Optional)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: nfl-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    restart: unless-stopped
    networks:
      - nfl-network
    profiles:
      - logging

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: nfl-logstash
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logs:/usr/share/logstash/logs
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - nfl-network
    profiles:
      - logging

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: nfl-kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - nfl-network
    profiles:
      - logging

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  nfl-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16